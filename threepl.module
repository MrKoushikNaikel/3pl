<?php
/**
 * Implements hook_cron().
 */
function threepl_cron() {
	    order_sync_to_3pl();
		watchdog('3PL','Pushed order to 3PL during cron run at'.date('y-m-d h:s'));
}	
/**
 * Implements hook_menu().
 */
function threepl_menu() {
  $items = array();

  $items['admin/config/3pl'] = array(
    'title' => '3PL configure',
    'description' => 'Configuration for 3PL API',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('api_settings_3pl'),
    'access arguments' => array('3pl API set'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['order23pl'] = array(
    'title' => 'orderTo3pl',
    'description' => 'Order Sync to 3PL',
    'page callback' => 'order_sync_to_3pl',
    'access callback' => true,
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/orders/%/Sendto3pl'] = array(
    'title' => t('3PL'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('push_to_3pl_manually', 3),
    'access arguments' => array('3pl Push'),
    'type' => MENU_LOCAL_TASK,
  );  
  return $items;
}
function push_to_3pl_manually($form, &$form_state, $orderID){
  $form['order_id'] = array(
    '#type' => 'value',
    '#value' => $orderID,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit to 3PL'),
  );
  return $form;	
	//print_r($orderID); die;
	//orderPush($orderID,$auth)
	
}
function push_to_3pl_manually_submit(&$form, &$form_state) {
	$ClientID = variable_get('ClientID', 'value');
	$ClientSecretID = variable_get('ClientSecretID', 'value');
	$CustomerID = variable_get('CustomerID', 'value');
	$TPL=variable_get('TPL', 'value');
	$facilityID=variable_get('facilityID', 'value');	
	$orderID = $form_state['values']['order_id'];
	if(authorization3pl($ClientID,$ClientSecretID,$CustomerID,$TPL))
		$auth=authorization3pl($ClientID,$ClientSecretID,$CustomerID,$TPL);
	else
		die("3PL Error");	
	orderPush($orderID,$auth);
}
/* function threepl_commerce_order_status_info() {

     $order_statuses['threepl_sendto3pl'] = array(
            'name' => 'threepl_sendto3pl',
            'title' => t('Sendto3pl'),
            'state' => 'pending',
            'cart' => false,
            'weight' => 3,
    );
	return $order_statuses;
	
} */
/**
 * Implements hook_permission().
 */
function threepl_permission() {
  return array(
    '3pl API set' => array(
      'title' => t('Configuration for 3PL API'),
      'description' => t('Configuration for 3PL API.'),
    ),
    '3pl Push' => array(
      'title' => t('Configuration for 3PL Push'),
      'description' => t('Configuration for 3PL Push.'),
    ),	
  );
}
/**
 * Implements hook_flush_caches().
 */
function threepl_flush_caches() {
		variable_set("auth_time_3pl",0);
		variable_set("auth_token_3pl","");
		return array();
}
/**
 * Implements hook_commerce_order_update().
 */
function threepl_commerce_order_update($order) {
	if ($order->status == 'order_transmitted' || $order->status == 'pending') {
		$result = db_select('order3pl', 'order_id')
			->fields('order_id', array('order_id'))
			->condition('order_id', $order->order_number, '=')
			->range(0, 1)
			->execute()
			->rowCount();
		if (!$result){
			$update3pldb = db_insert('order3pl') // Table name no longer needs {}
			->fields(array(
			'order_id' => $order->order_number,
			'push_status' =>1,
			'created_date' => date('yy-m-d H:i:s'),
			))
			->execute();
		}
		$CheckedPushed=db_select('order3pl', 'order_id')
				->fields('order_id', array('order_id'))
				->condition('order_id', $order->order_number, '=')
				->condition('push_status', array(1,3), 'IN')
				->range(0, 1)
				->execute()
				->rowCount();		
		if($order->status == 'order_transmitted' && $CheckedPushed){
			$ClientID = variable_get('ClientID', 'value');
			$ClientSecretID = variable_get('ClientSecretID', 'value');
			$CustomerID = variable_get('CustomerID', 'value');
			$TPL=variable_get('TPL', 'value');
			$facilityID=variable_get('facilityID', 'value');	
			$orderID = $order->order_number;
			if(authorization3pl($ClientID,$ClientSecretID,$CustomerID,$TPL))
				$auth=authorization3pl($ClientID,$ClientSecretID,$CustomerID,$TPL);
			else
				die("3PL Error");	
			orderPush($orderID,$auth);
		}
		
		
	}
}

function order3plOrderInitialized() {

	$orders=db_select('commerce_order', 'order_id')->fields('order_id', array('order_id'))->condition('status', 'pending','=')->execute()->fetchAll(PDO::FETCH_ASSOC);
	$query = db_insert('order3pl')->fields(array('order_id','created_date')); foreach ($orders as $record) { $query->values(array($record['order_id'],date('yy-m-d H:i:s'))); } $query->execute(); 
	if($query) variable_set("order3plOrderInitialized",0);
}
function api_settings_3pl($form, &$form_state){
	if(variable_get('order3plOrderInitialized', 0)==1){
		order3plOrderInitialized();
		//echo "initialized....";
	}
	$form['ClientID'] = array(
		'#title' => 'Client ID',
		'#description' => 'Enter valid Client ID',
		'#type' => 'textfield',
		'#required' => TRUE,
		'#default_value' => variable_get('ClientID', ''),
		'#attributes' => array('placeholder' => t('Enter Client ID')),
	);
	$form['ClientSecretID'] = array(
		'#title' => 'Client Secret ID',
		'#description' => 'Enter valid Client Secret ID',
		'#type' => 'textfield',
		'#required' => TRUE,
		'#default_value' => variable_get('ClientSecretID', ''),
		'#attributes' => array('placeholder' => t('Enter Client Secret ID')),
	);
	$form['CustomerID'] = array(
		'#title' => 'Customer ID',
		'#description' => 'Enter valid Customer ID',
		'#type' => 'textfield',
		'#required' => TRUE,
		'#default_value' => variable_get('CustomerID', ''),
		'#attributes' => array('placeholder' => t('Enter Client Customer ID')),
	);
	$form['TPL'] = array(
		'#title' => 'TPL',
		'#description' => 'Enter TPL',
		'#type' => 'textfield',
		'#required' => FALSE,
		'#default_value' => variable_get('TPL', ''),
		'#attributes' => array('placeholder' => t('Enter TPL')),
	);
	$form['facilityID'] = array(
		'#title' => 'Facility ID',
		'#description' => 'Enter Facility ID',
		'#type' => 'textfield',
		'#required' => TRUE,
		'#default_value' => variable_get('facilityID', ''),
		'#attributes' => array('placeholder' => t('Enter Facility ID')),
	);
	return system_settings_form($form);
}

function authorization3pl($ClientID,$ClientSecretID,$CustomerID,$TPL){
	$auth_time_3pl=variable_get('auth_time_3pl', 'value');
	if((time()- $auth_time_3pl)<3000 ){
		$auth_token_3pl=variable_get('auth_token_3pl', 'value');
		return array("resonse"=>$auth_token_3pl, "responseCode"=> 200,"savedToken"=>true);
		return;
	}
	$postfiled=json_encode(array("grant_type"=>"client_credentials", "user_login_id"=>$CustomerID,"tpl"=>$TPL));
	$base64encodedkey=base64_encode($ClientID.":".$ClientSecretID);
	$curlheader=array(
		'Host: secure-wms.com',
		'Connection: keep-alive',
		'Content-Type: application/json',
		'Accept: application/json',
		'Authorization: Basic '.$base64encodedkey,
		'Accept-Encoding: gzip,deflate,sdch',
		'Accept-Language: en-US,en;q=0.8'
	  );
	$curlsetopt=array(
	  CURLOPT_URL => 'https://secure-wms.com/AuthServer/api/Token',
	  CURLOPT_RETURNTRANSFER => true,
	  CURLOPT_ENCODING => '',
	  CURLOPT_MAXREDIRS => 10,
	  CURLOPT_TIMEOUT => 0,
	  CURLOPT_FOLLOWLOCATION => true,
	  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
	  CURLOPT_CUSTOMREQUEST => 'POST',
	  CURLOPT_POSTFIELDS =>$postfiled,
	  CURLOPT_HTTPHEADER => $curlheader,
	);
	  //print_r($curlsetopt);
	$curl = curl_init();
	curl_setopt_array($curl, $curlsetopt);
	$response = curl_exec($curl);
	$httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
	if($httpcode==200){
		variable_set("auth_time_3pl",time());
		variable_set("auth_token_3pl",$response);
	}
	curl_close($curl);
	if($httpcode!=200){
		return false;
	}
	return array("resonse"=>$response, "responseCode"=> $httpcode);
}

function order_sync_to_3pl(){
	$ClientID = variable_get('ClientID', 'value');
	$ClientSecretID = variable_get('ClientSecretID', 'value');
	$CustomerID = variable_get('CustomerID', 'value');
	$TPL=variable_get('TPL', 'value');
	$facilityID=variable_get('facilityID', 'value');
	if(authorization3pl($ClientID,$ClientSecretID,$CustomerID,$TPL))
		$auth=authorization3pl($ClientID,$ClientSecretID,$CustomerID,$TPL);
	else
		die("3PL Error");
	//print_r($auth);
	$orders=getorderstogo3pl();
	if(!$orders){
		drupal_set_message(t("No order to upload at 3PL server"), 'error');
		drupal_goto('user');
	}
	foreach($orders as $eachorder){
		$orderId=$eachorder['order_id'];
		//echo $orderId;
		if(orderPush($orderId,$auth)){
			//echo "This order($orderId) will sync<br/>";
		}
	}


	//die;
}
function orderPush($orderID,$auth){
	$access_token=json_decode($auth['resonse']);
	$token=$access_token->access_token;
	create_order($token,$orderID, variable_get('CustomerID', 'value'), variable_get('facilityID', 'value'));
	if($orderID)
		return true;
	else return false;
	//echo $orderID;

	//print_r(commerce_customer_profile_load(1));
	//print_r(commerce_customer_profile_load(2));

	//print_r($access_token);

	//CustomerItemizedChargesList($CustomerID,$facilityID,$token);
	//return create_order($token,$orderID);	
}
function create_order($token,$orderID,$CustomerID,$facilityID){
	//echo $orderID;
	if($orderID){
		$order=commerce_order_load($orderID);
		 /*  if ($order->status == 'veracore_fulfilment') {
			return;
		  }	 */	
		$billing= commerce_customer_profile_load($order->commerce_customer_billing['und'][0]['profile_id']);
		//print_r($billing);
		$shipping= commerce_customer_profile_load($order->commerce_customer_shipping['und'][0]['profile_id']);
		//print_r($shipping);
		$shippingmethod=db_select('commerce_line_item', 'shippingmethod')->fields('shippingmethod')->condition('order_id', $orderID,'=')->condition('type', 'shipping','=')->execute()->fetchAll(PDO::FETCH_ASSOC);
		$products=db_select('commerce_line_item', 'products')->fields('products')->condition('order_id', $orderID,'=')->condition('type', 'product','=')->execute()->fetchAll(PDO::FETCH_ASSOC);
		//print_r( $products); print_r( $shippingmethod[0]); die;
        $shippingmethodDetails=unserialize($shippingmethod[0]['data']);
        $shippingmethodTitle=$shippingmethodDetails['shipping_service']['title'] ;
		$shippingmethodName=$shippingmethodDetails['shipping_service']['name'] ;
		$shippingserviceDetails= commerce_shipping_service_load($shippingmethodName);
		$shippingserviceDetailsDescriptionDecoded=json_decode($shippingserviceDetails['description']); 
		$shippingserviceCarrier=$shippingserviceDetailsDescriptionDecoded->Carrier;
		$shippingserviceSCAC=$shippingserviceDetailsDescriptionDecoded->SCAC;
		$shippingserviceDESCRIPTION=$shippingserviceDetailsDescriptionDecoded->DESCRIPTION;		
		//print_r (json_decode($shippingserviceDetails['description'])); die;		
	}else return false;
	if(empty($billing->commerce_customer_address['und'][0]['organisation_name']))
		$billing->commerce_customer_address['und'][0]['organisation_name']="";
	$productItems=array();
	foreach($products as $product){
		$productItems[]='{
				"itemIdentifier": {
					"sku": "'.$product['line_item_label'].'"
				},
				"qty": '.$product['quantity'].'
			}';
	}
	$postfiled='{
		"customerIdentifier": {
			"id": "'.$CustomerID.'"
		},
		"facilityIdentifier": {
			"id": "'.$facilityID.'"
		},
		"referenceNum": "WEB-'.$order->order_number.'",
		"notes": "'.$order->field_order_comment['und'][0]['value'].'",
		"shippingNotes": "Carrier specific shipping instructions",
		"billingCode": "Prepaid",
		"routingInfo": {
			"carrier": "'.$shippingserviceCarrier.'",
			"mode": "'.$shippingmethodTitle.'",
			"scacCode": "'.$shippingserviceSCAC.'",
			"account": ""
		},
		"billTo": {
			"companyName": "'.$billing->commerce_customer_address['und'][0]['organisation_name'].'",
			"name": "'.$billing->commerce_customer_address['und'][0]['first_name'].' '.$billing->commerce_customer_address['und'][0]['last_name'].'",
			"address1": "'.$billing->commerce_customer_address['und'][0]['thoroughfare'].'",
			"address2": "'.$billing->commerce_customer_address['und'][0]['premise'].'",
			"city": "'.$billing->commerce_customer_address['und'][0]['locality'].'",
			"state": "'.$billing->commerce_customer_address['und'][0]['administrative_area'].'",
			"zip": "'.$billing->commerce_customer_address['und'][0]['postal_code'].'",
			"country": "'.$billing->commerce_customer_address['und'][0]['country'].'",
			"phoneNumber": "'.$shipping->field_phone['und'][0]['value'].'",
			"emailAddress": "'.$order->mail.'",
		},
		"shipTo": {
			"companyName": "'.$shipping->commerce_customer_address['und'][0]['organisation_name'].'",
			"name": "'.$shipping->commerce_customer_address['und'][0]['first_name'].' '.$shipping->commerce_customer_address['und'][0]['last_name'].'",
			"address1": "'.$shipping->commerce_customer_address['und'][0]['thoroughfare'].'",
			"address2": "'.$shipping->commerce_customer_address['und'][0]['premise'].'",
			"city": "'.$shipping->commerce_customer_address['und'][0]['locality'].'",
			"state": "'.$shipping->commerce_customer_address['und'][0]['administrative_area'].'",
			"zip": "'.$shipping->commerce_customer_address['und'][0]['postal_code'].'",
			"country": "'.$shipping->commerce_customer_address['und'][0]['country'].'",
			"phoneNumber": "'.$shipping->field_phone['und'][0]['value'].'",
			"emailAddress": "'.$order->mail.'",
		},
		"orderItems": [
			'. implode(',',$productItems).'		
		]
	}';
		//$shippingserviceCarrier=$shippingserviceDetailsDescriptionDecoded->Carrier;
		//$shippingserviceSCAC=$shippingserviceDetailsDescriptionDecoded->SCAC;
		//$shippingserviceDESCRIPTION=$shippingserviceDetailsDescriptionDecoded->DESCRIPTION;		
	//echo $postfiled;
	//return;
	$curl = curl_init();

	//echo "Post filed Josn to authentication(CURLOPT_POSTFIELDS):<br/>". $postfiled ."<br/>";
	//return;
	curl_setopt_array($curl, array(
		  CURLOPT_URL => 'https://secure-wms.com/orders',
		  CURLOPT_RETURNTRANSFER => true,
		  CURLOPT_ENCODING => '',
		  CURLOPT_MAXREDIRS => 10,
		  CURLOPT_TIMEOUT => 0,
		  CURLOPT_FOLLOWLOCATION => true,
		  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
		  CURLOPT_CUSTOMREQUEST => 'POST',
		  CURLOPT_POSTFIELDS =>$postfiled,
		  CURLOPT_HTTPHEADER => array(
			'Content-Type: application/json',
			'Accept: application/hal+json',
			'Authorization: Bearer '.$token
		  ),
		)
	);

	$response = curl_exec($curl);
	$httpcode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
	curl_close($curl);
	//drupal_set_message(t($response), 'error');
	//echo $response;
	$order->order_number;
	$responseJsondecode=json_decode($response);
	if($httpcode==201 && isset($responseJsondecode->readOnly->orderId) ){
		$responseJsondecode=json_decode($response);
		//print_r($responseJsondecode); die;
	$num_updated = db_update('order3pl') // Table name no longer needs {}
	  ->fields(array(
		'order_id_3pl' => $responseJsondecode->readOnly->orderId,
		'push_status' => 2,
	  ))
	  ->condition('order_id', $order->order_number, '=')
	  ->execute();
		drupal_set_message(t("Order pushed"), 'status');
		commerce_order_status_update($order, 'order_transmitted', false, null,"Order ".$order->order_number." pushed to 3PL server");
	}else{
		if($responseJsondecode->ErrorCode=="Duplicate"){
		$num_updated = db_update('order3pl') // Table name no longer needs {}
		  ->fields(array(
			'error' => $response,
			'push_status' => 2,
		  ))
		  ->condition('order_id', $order->order_number, '=')
		  ->execute();				
		}else{
		$num_updated = db_update('order3pl') // Table name no longer needs {}
		  ->fields(array(
			'error' => $response,
			'push_status' => 3,
		  ))
		  ->condition('order_id', $order->order_number, '=')
		  ->execute();	
		}
		  drupal_set_message(t("Order not pushed"), 'error');
	}
	watchdog('3PL order pushed','Pushed order to 3PL at'.date('y-m-d h:s').'>>>>>>>>>Https Status: '.$httpcode." Response: ".$response);
}
function getorderstogo3pl(){
	return db_select('order3pl', 'getorderstogo3pl')->fields('getorderstogo3pl', array('order_id'))->condition('push_status', array(1,3),'IN')->execute()->fetchAll(PDO::FETCH_ASSOC);
	//return array(0,1);
}
